buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.1.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
}


group = 'io.github.synepis'
version = decorateBaseVersion('1.0.0')

bootJar {
    baseName = 'todo'
}

repositories {
    mavenCentral()
    jcenter()
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

dependencies {
    compileOnly "org.projectlombok:lombok:1.18.4"
    testCompileOnly "org.projectlombok:lombok:1.18.4"
    annotationProcessor "org.projectlombok:lombok:1.18.4"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.4"

    compile "org.springframework.boot:spring-boot-starter-web:2.1.1.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-jdbc:2.1.1.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-security:2.1.1.RELEASE"

    compile "org.apache.httpcomponents:httpclient:4.5.7"
    compile "org.apache.commons:commons-lang3:3.8.1"

    compile "org.hibernate:hibernate-validator:6.0.15.Final"

    compile "org.postgresql:postgresql:42.2.5"
    compile "org.flywaydb:flyway-core:5.2.4"

    compile "org.slf4j:slf4j-api:1.7.25"
    compile "ch.qos.logback:logback-classic:1.2.3"

    testCompile "junit:junit"
    testCompile "org.codehaus.groovy:groovy-all:2.4.15"

    testCompile "org.spockframework:spock-core:1.2-groovy-2.4"
    testCompile "org.spockframework:spock-spring:1.1-groovy-2.4"
    testCompile "org.springframework.boot:spring-boot-starter-test:2.1.1.RELEASE"

    testCompile "org.testcontainers:postgresql:1.10.2"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url System.getenv("AWS_S3_PUBLISH_URL")
            credentials(AwsCredentials) {
                accessKey System.getenv('AWS_ACCESS_KEY')
                secretKey System.getenv('AWS_SECRET_KEY')
            }
        }
    }
}

wrapper {
    gradleVersion = '5.2'
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardError" //, "standardOut"
    }
}

def decorateBaseVersion(baseVersion) {
    def gitCommit = System.getenv("TRAVIS_COMMIT")
    def travisBranch = System.getenv("TRAVIS_BRANCH")
    def travisPrBranch = System.getenv("TRAVIS_PULL_REQUEST_BRANCH")

    def gitBranch = travisPrBranch
            ? travisPrBranch
            : travisBranch

    def version = baseVersion
    if (notBlank(gitBranch) && gitBranch != "master") {
        version += "-" + gitBranch
    }

    if (notBlank(gitCommit)) {
        version += "-" + gitCommit.take(8)
    }

    println "Setting version: " + version
    println "base version: " + baseVersion
    println "git branch: " + gitBranch
    println "git commit: " + gitCommit
    println "TRAVIS_COMMIT: " +  System.getenv("TRAVIS_COMMIT")
    println "TRAVIS_BRANCH: " +  System.getenv("TRAVIS_BRANCH")
    println "TRAVIS_PULL_REQUEST_BRANCH: " +  System.getenv("TRAVIS_PULL_REQUEST_BRANCH")
    version
}

def notBlank(String string) {
    string != null && string.trim() != ""
}
